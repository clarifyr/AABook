% !Rnw root = AABase.Rnw

\chapter{Essential R Language Elements}

In this chapter we will start playing with some basic R functionalities and start getting comfortable with typing commands in the R console.

\subsection{Basic Arithmatic and Logical Operators}

You can use R as a glorified calculator. All arithmatic calculations can be easily performed using \rconcept{Arithmatic Operators} like + (addition), - (subtraction), * (multiplication), / (division) and \verb|^| (exponent).
<<>>=
10  +    20  #As you can see - spaces don't matter, mostly.
20/5
16 ^ 0.5  # Usual Arithmatic Operators: +, -, * , /, ^
@

When you have complicated Arithmatic Expressions, R follows usual \rconcept{Arithmatic Operator Precedance}: Brackets, Exponent, Division and Multiplication, Addition and Subtraction - in that order. Go Left to Right for the same precedance. Of course it is preferable to put in enough paratheses so that you are not relying on R's operator precedance for accurate execution of your commands. 
<<>>=
5 + 8 / 2 * 4 - 3 # First * then / then + then - 
# You should include enough parantheses
(5 + 8) /((2 * 4) - 3)
@

Two arithmatic operators that many are not familiar are: \rconcept{Integer Division} and \rconcept{Remainder} operators. The \texttt{Integer Division} operator: \verb|%/%|, provides just the quotient for a division operation while the \texttt{remainder operator}: \verb|%%|, provides just the remainder for a division operation.

<<>>=
10 %/% 3 # Integer division - only gives the quotient as the output
10 %% 3 # The counterpart to %/%, gives remainder as the output
@

Just as arithmatic expressions evaluate to a numerical result, logical expressions evaluate to a logical result - either \texttt{TRUE} or \texttt{FALSE}. \mnote{Note the upper case format for the two keywords.} Logical expressions can be created using \rconcept{Logical Operators}: equal to (==), greate than (>), less than (<), greater than or equal to (>=), less than or equal to (<=) and finally, not equal to (!=).

\subsection{Using Built-In Functions}

R includes many \texttt{functions}. \index{Key Concepts!Functions} Functions take some values as inputs (often called \texttt{arguments}), perform some calculation and return the result. For example $sqrt()$,\index{R Commands!sqrt} the \texttt{square root function} takes a value and returns its square root.

<<cache=TRUE>>=
sqrt(100) #Calculate square root of 100
@

R includes perhaps thousands of functions for different tasks. Some functions can take several arguments with many of them being optional. Such optional arguments typically have a default value that is used in case a value is not provided for that argument. When supplying several  arguments, it is a good practice to used \texttt{named arguments} as shown below.

<<cache=TRUE>>=
#Calling functions with name arguments
round(x = 1.23456789, digits = 4) 
#Arguments passed in order, withour names
round(1.23456789, 4)
#Using default values for optional arguments
round(1.23456789) 
@

The first line above shows running (or \texttt{calling}) the function $round$ \index{R Commands!round} with explicitly named arguments. $x$ represents the number to be rounded and $digits$ represents how many digits after the decimal point should the rounding be done for. We could have called the function without named arguments (like in the second line above) but then we would need to provide all the arguments in the exact order needed. As it is easy to mix-up the order, it is recommended that named arguments are used when multiple arguments are passed to a function.

The third line in the code above shows what happens when an optional argument is not provided to a function. As we have not specified the number of digits, the function uses the default value of the argument (which happens to be $0$ in this case). As a result, the functions rounds the number to an integer.

Your R is only as good as your R Packages - so lets figure that first how to install a package - you can do through RStudio GUI - or use the command below. Note the quote marks around the package name - which, like most other things in R, are case sensitive.
<<eval=FALSE, cache=TRUE>>=
install.packages("ggplot2")
@

Installing is only the first step - that brings the package to your local machine but does not load it into the current R session. To do so, you can use the \texttt{library} command. You can use the \texttt{detach} commans to unload a package from the current R session. There are several thousand packages in R - waiting for us to explore
<<cache=TRUE>>=
library(ggplot2)
detach(package:ggplot2)
@

You typically work in a directory during a R session. You can find current current working directory or set working directory to a directory of your choice. 
When setting working directory to the desired location, in Windows use \verb|/| or \verb|\\| instead of \verb|\| character as the separator character. 
<<cache=TRUE>>=
getwd()
@
<<eval=FALSE>>=
setwd("Enter Directory Addess Here")
@

You usually have a \textbf{home directory} defined for your R installation. When you start R, your R session will usually start in this home directory. Home directory is usually referred using the \verb|~| character. You can find out the directory assigned the \texttt{Home} status using the command \texttt{path.expand}
<<cache=TRUE>>=
path.expand("~")
@

First thing - how to get help when you need it. For example: What the hell is a Vector?
<<cache=TRUE, eval=FALSE>>=
#Output supressed for brevity
help("vector") #default approach, note the quote marks
?"vector" #or this simple command works too
example("barplot") #You can also look up examples
@

As you work with R, you will create Objects. You can get a list of current objects using the \texttt{objects} command. You can delete objects using the \texttt{rm} command (rm is short for remove). BTW - Check of Environment Tab in RStudio - you can see that R/RStudio is keeping track of your objects and their values

<<cache=TRUE>>=
objects()
#Don't like a cluttered workspace, delete all objects by
rm(list = ls())  #ls() gives a list of all the objects
@


When you are done with your current R session, you can quit using the \texttt{q} command. You should save your current session first though.
<<cache=TRUE, eval=FALSE>>=
#Commands only for demo, not evaluated.
save.image(file = "FileName.RData")
q()
@


\section{apply functions}

\section{If Statements}

\section{Loops}

\section{R Utilities}

In this section, I am collecting all the random R stuff that is useful but not easily categorizable.

\subsection{Calculating Execution Time}

You would often want to calculate how much it takes for R to do something. You can do so by using the command \rcommand{system.time}, which returns the time takesn by R to execute the argument to the function.
<<>>=
#Time taken to delete all objects in memory
system.time(rm(list = ls()))
@

\subsection{Updating R Version}

You can check the current version of R that you are running by using the \rcommand{version} command.
<<>>=
version
@

If your version is not up-to-date then updating to the most current version of R is a charm (if you are in a Windows setup) using the \rcommand{installr} command. 
<<eval=FALSE>>=
#Output suppressed as this book is writtn in a Linux machine
install.packages("installr"); library(installr)
installr()
@

\chapterendsymbol
